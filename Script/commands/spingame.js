const users = {}; // userId ржЕржирзБржпрж╛рзЯрзА ржкрзЯрзЗржирзНржЯ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп

function getUserPoints(userId) {
  if (!users[userId] || users[userId].points <= 0) {
    users[userId] = { points: 20000 };
  }
  return users[userId].points;
}

function setUserPoints(userId, points) {
  users[userId] = { points };
}

function handleSpinCommand(userId, amount) {
  const currentPoints = getUserPoints(userId);

  if (isNaN(amount) || amount <= 0) {
    return `тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржарж┐ржХ ржкржпрж╝рзЗржирзНржЯ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред ржЙржжрж╛рж╣рж░ржг: /spin 500`;
  }

  if (amount > currentPoints) {
    return `тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржкржпрж╝рзЗржирзНржЯ ржирзЗржЗред ржЖржкржирж╛рж░ ржкржпрж╝рзЗржирзНржЯ: ${currentPoints}`;
  }

  const result = Math.random() < 0.5 ? 'lose' : 'win'; // 50% chance
  let newPoints;

  if (result === 'win') {
    newPoints = currentPoints + amount;
    setUserPoints(userId, newPoints);
    return `ЁЯОЙ ржЖржкржирж┐ ржЬрж┐рждрзЗржЫрзЗржи! ржЖржкржирж╛рж░ ржирждрзБржи ржкржпрж╝рзЗржирзНржЯ: ${newPoints}`;
  } else {
    newPoints = currentPoints - amount;
    setUserPoints(userId, newPoints);
    return `ЁЯШв ржЖржкржирж┐ рж╣рзЗрж░рзЗржЫрзЗржи! ржЖржкржирж╛рж░ ржирждрзБржи ржкржпрж╝рзЗржирзНржЯ: ${newPoints}`;
  }
}

function handleSpintkCommand(userId) {
  const points = getUserPoints(userId);
  return `ЁЯТ░ ржЖржкржирж╛рж░ ржорзЛржЯ ржкржпрж╝рзЗржирзНржЯ: ${points}`;
}

module.exports = {
  name: "spin",
  description: "ржкржпрж╝рзЗржирзНржЯ ржжрж┐ржпрж╝рзЗ spin ржХрж░рзБржи",
  execute({ event, args }) {
    const userId = event.senderID;
    const amount = parseInt(args[0]);
    return handleSpinCommand(userId, amount);
  },
};

module.exports.spintk = {
  name: "spintk",
  description: "ржЖржкржирж╛рж░ ржкржпрж╝рзЗржирзНржЯ ржЪрзЗржХ ржХрж░рзБржи",
  execute({ event }) {
    const userId = event.senderID;
    return handleSpintkCommand(userId);
  },
};
