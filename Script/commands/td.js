const fs = require("fs");

module.exports.config = { name: "td", version: "1.1.0", hasPermssion: 0, credits: "Nayan", description: "Truth or Dare Game with Custom Additions", commandCategory: "game", usages: "/td", cooldowns: 3 };

const DATA_FILE = __dirname + "/td_data.json";

function ensureDataFile() { if (!fs.existsSync(DATA_FILE)) { const initialData = { truths: [], dares: [] }; fs.writeFileSync(DATA_FILE, JSON.stringify(initialData, null, 2)); } }

module.exports.onLoad = () => ensureDataFile();

module.exports.run = async function ({ event, api, args }) { ensureDataFile(); const data = JSON.parse(fs.readFileSync(DATA_FILE));

const command = args[0]?.toLowerCase();

if (command === "rules") { return api.sendMessage( `ЁЯУМ Truth or Dare Game Commands:

ЁЯСЙ /td - Start the game ЁЯСЙ Reply with 'truth' or 'dare' ЁЯСЙ /addtd truth <text> - Add a custom truth ЁЯСЙ /addtd dare <text> - Add a custom dare ЁЯСЙ /tdlist - View all truths and dares ЁЯСЙ /td remove truth <index> - Remove truth ЁЯСЙ /td remove dare <index> - Remove dare`, event.threadID, event.messageID ); }

if (command === "remove" && args[1]) { const type = args[1]; const index = parseInt(args[2]) - 1; if (!['truth', 'dare'].includes(type) || isNaN(index)) return api.sendMessage("тЪая╕П Usage: /td remove truth|dare <index>", event.threadID);

if (type === "truth" && data.truths[index]) {
  data.truths.splice(index, 1);
} else if (type === "dare" && data.dares[index]) {
  data.dares.splice(index, 1);
} else {
  return api.sendMessage("тЭМ Invalid index.", event.threadID);
}
fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
return api.sendMessage(`тЬЕ Removed ${type} at position ${index + 1}`, event.threadID);

}

if (command === "list" || command === "tdlist") { const truths = data.truths.map((t, i) => ${i + 1}. ${t}).join("\n"); const dares = data.dares.map((d, i) => ${i + 1}. ${d}).join("\n"); return api.sendMessage(ЁЯУЬ Truths:\n${truths || "None"}\n\nЁЯОп Dares:\n${dares || "None"}, event.threadID); }

if (command === "addtd") { const type = args[1]; const text = args.slice(2).join(" "); if (!['truth', 'dare'].includes(type) || !text) return api.sendMessage("тЪая╕П Usage: /addtd truth|dare <text>", event.threadID);

if (type === "truth") data.truths.push(text);
else if (type === "dare") data.dares.push(text);
fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
return api.sendMessage(`тЬЕ Added to ${type}: ${text}`, event.threadID);

}

if (!event.messageReply || !['truth', 'dare'].includes(event.body.toLowerCase())) { return api.sendMessage("ЁЯдФ ржЖржкржирж┐ ржХрж┐ ржЪрж╛ржи? Truth ржирж╛ Dare? рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржи 'truth' ржЕржержмрж╛ 'dare' рж▓рж┐ржЦрзЗ!", event.threadID, (err, info) => { global.client.handleReply.push({ type: "td", name: module.exports.config.name, messageID: info.messageID }); }, event.messageID); } };

module.exports.handleReply = async function ({ api, event, handleReply }) { ensureDataFile(); const data = JSON.parse(fs.readFileSync(DATA_FILE));

const truths = data.truths.length ? data.truths : [ "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛рж░рзЛ ржЙржкрж░ ржХрзНрж░рж╛рж╢ ржЦрзЗрзЯрзЗржЫрзЛ ржпрж╛ржХрзЗ рждрзБржорж┐ ржЪрзЗржирзЛ ржирж╛?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬ рж╕рж┐ржи ржХрж░рзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзЛржирж┐?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛ржЙржХрзЗ ржорж┐ржерзНржпрж╛ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ ржмрж▓рзЗржЫрзЛ?", "рждрзЛржорж╛рж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржнрзЯ ржХрзА?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржкрж░рзАржХрзНрж╖рж╛рзЯ ржиржХрж▓ ржХрж░рзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛ржЙржХрзЗ ржЧрзЛржкржирзЗ ржкржЫржирзНржж ржХрж░рзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛ржЙржХрзЗ ржЕржирзБрж╕рж░ржг ржХрж░рзЗржЫрзЛ ржлрзЗрж╕ржмрзБржХрзЗ ржмрж╛ ржЗржирж╕рзНржЯрж╛ржЧрзНрж░рж╛ржорзЗ?", "рждрзБржорж┐ ржХрж┐ ржПржЦржи ржХрж╛рж░рзЛ ржЙржкрж░ ржХрзНрж░рж╛рж╢ ржЦрж╛ржЪрзНржЫрзЛ?", "рж╢рзЗрж╖ржмрж╛рж░ ржХрж╛ржБржжржЫрзЛ ржХржЦржи?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрж╛рж░рзЛ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХ рж░рзЗржЦрзЗ ржЕржирзНржп ржХрж╛рж░рзЛ рж╕рж╛ржерзЗ ржХржерж╛ ржЪрж╛рж▓рж┐рзЯрзЗржЫрзЛ?", "рждрзЛржорж╛рж░ ржЬрзАржмржирзЗрж░ рж╕ржмржЪрзЗрзЯрзЗ рж▓ржЬрзНржЬрж╛рж░ ржорзБрж╣рзВрж░рзНржд ржХрзЛржиржЯрж╛?", "рждрзБржорж┐ ржХрж┐ ржЧрзЛржкржирзЗ ржХрж╛рж░рзЛ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж░рзЗржЧрзБрж▓рж╛рж░ ржЪрзЗржХ ржХрж░рзЛ?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржЧрж╛рж▓рж┐ ржжрж┐рзЯрзЗ ржкрж░рзЗ ржжрзБржГржЦ ржкрзЗрзЯрзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржмрж╛ржирзНржзржмрзАрж░ ржкрзНрж░рж╛ржХрзНрждржирзЗрж░ ржЙржкрж░ ржХрзНрж░рж╛рж╢ ржЦрзЗрзЯрзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржПржЦржирзЛ ржПржХрзНрж╕ржХрзЗ ржнрзБрж▓рждрзЗ ржкрж╛рж░рзЛржирж┐?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржХрзНрж▓рж╛рж╕рзЗ ржШрзБржорж┐рзЯрзЗ ржкрж░рзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржХржЦржирзЛ ржмржирзНржзрзБржХрзЗ ржмрж┐рж╢рзНржмрж╛рж╕ ржнржЩрзНржЧ ржХрж░рзЗржЫрзЛ?", "рждрзБржорж┐ ржХрж┐ ржирж┐ржЬрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ ржорж┐ржерзНржпрж╛ ржмрж▓рзЗржЫрзЛ ржХрж╛ржЙржХрзЗ ржЗржоржкрзНрж░рзЗрж╕ ржХрж░рж╛рж░ ржЬржирзНржп?", "рждрзЛржорж╛рж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрж╛ржЬрзЗ ржЕржнрзНржпрж╛рж╕ ржХрзА?", "рждрзБржорж┐ ржХрж┐ ржПржЦржирзЛ ржХрзЛржирзЛ ржЯрзЗржбрж┐ ржмрж┐рзЯрж╛рж░ ржирж┐рзЯрзЗ ржШрзБржорж╛ржУ?" ];

const dares = data.dares.length ? data.dares : [ "рждрзБржорж┐ ржПржЦржиржЗ ржирж┐ржЬрзЗрж░ ржПржХржЯрж╛ ржлрж╛ржирж┐ ржЫржмрж┐ рждрзБрж▓рзЗ ржкрж╛ржарж╛ржУ!", "рждрзБржорж┐ ржПржЦржиржЗ рждрзЛржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржкрж┐ржХржЪрж╛рж░рзЗ ржПржХржЯрж╛ ржкржЯрзЗржЯрзЛ рж▓рж╛ржЧрж╛ржУ рзз ржШржгрзНржЯрж╛рж░ ржЬржирзНржп!", "ржирж┐ржЬрзЗрж░ ржирж╛ржо ржмрзНржпрж╛ржХржУрзЯрж╛рж░рзНржбрзЗ ржмрж▓рзЛ, ржнрж┐ржбрж┐ржУ ржХрж░рзЛ!", "ржпрж╛ржХрзЗ ржкржЫржирзНржж ржХрж░рзЛ рждрж╛ржХрзЗ ржПржЦржиржЗ ржорзЗрж╕рзЗржЬ ржХрж░рзЛ 'рждрзБржорж┐ ржХрж┐ржЙржЯ!'", "ржирж┐ржЬрзЗрж░ ржнрзЯрзЗрж╕рзЗ ржЧрж░рзБрж░ ржбрж╛ржХ ржжрж╛ржУ ржПржмржВ ржкрж╛ржарж╛ржУ!", "ржПржЦржиржЗ рззрзжржЯрж╛ ржкрзБрж╢-ржЖржк ржжрж╛ржУ, ржкрзНрж░ржорж╛ржг ржЪрж╛ржУржпрж╝рж╛ рж╣рж▓рзЗ ржЫржмрж┐ ржкрж╛ржарж╛рждрзЗ рж╣ржмрзЗ!", "ржирж┐ржЬрзЗрж░ ржЧрж▓рж╛рж░ ржЖржУрзЯрж╛ржЬрзЗ ржЧрж╛ржи ржЧрзЗрзЯрзЗ ржкрж╛ржарж╛ржУ!", "ржПржХржЯрж╛ ржмрж╛ржЬрзЗ ржЬрзЛржХ ржмрж▓рзЛ ржПржмржВ ржирж┐ржЬрзЗ рж╣рж╛рж╕рзЛ!", "рзл ржмрж╛рж░ 'ржЖржорж┐ ржПржХржЯрж╛ ржЖрж▓рзБ' ржмрж▓рзЛ ржнрж┐ржбрж┐ржУ ржХрж░рзЗ!", "ржирж┐ржЬрзЗрж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓рзЗ рж▓рж┐ржЦрзЛ 'ржЖржорж┐ ржПржХржЬржи ржкрж╛ржЧрж▓ ржкрзНрж░рзЗржорж┐ржХ' рзз ржШржгрзНржЯрж╛рж░ ржЬржирзНржп!", "ржПржХржЯрж╛ рж╢рж┐рж╢рзБ ржХржгрзНржарзЗ рзйрзж рж╕рзЗржХрзЗржирзНржб ржХржерж╛ ржмрж▓рзЛ!", "ржПржХржЯрж╛ ржлрж╛ржирж┐ ржирж╛ржЪ ржХрж░рзЛ ржПржмржВ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржУ!", "ржкрж╛ржБржЪржЯрж╛ ржкрзНрж░рж╛ржгрзАрж░ ржЖржУрзЯрж╛ржЬ ржЕржирзБржХрж░ржг ржХрж░рзЛ!", "рждрзЛржорж╛рж░ ржлрзЛржирзЗрж░ рж╢рзЗрж╖ ржорзЗрж╕рзЗржЬржЯрж╛ ржПржЦрж╛ржирзЗ ржХржкрж┐ ржХрж░рзЗ ржкрж╛ржарж╛ржУ!", "ржХрж╛рж░рзЛ ржирж╛ржо ржЫрж╛рзЬрж╛ рждрж╛ржХрзЗ рж░рзЛржорж╛ржирзНржЯрж┐ржХ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржУ!", "ржирж┐ржЬрзЗрж░ ржирж╛ржХ ржжрж┐рзЯрзЗ ржХржерж╛ ржмрж▓рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ (ржоржЬрж╛ ржХрж░рзЗ)", "ржПржХржЯрж╛ ржирждрзБржи ржирж╛ржо ржжрж┐рзЯрзЗ ржирж┐ржЬрзЗрж░ ржкрж░рж┐ржЪрзЯ ржжрж╛ржУ ржкрж░ржмрж░рзНрждрзА рзй ржмрж╛рж░!", "ржмрж╛ржБ рж╣рж╛ржд ржжрж┐рзЯрзЗ ржирж┐ржЬрзЗрж░ ржирж╛ржо рж▓рзЗржЦрзЛ ржПржмржВ ржЫржмрж┐ ржкрж╛ржарж╛ржУ!", "рждрзБржорж┐ ржПржЦржиржЗ ржПржХржЯрж┐ ржЕржжрзНржнрзБржд рж╢ржмрзНржж ржмрж▓рзЛ, ржпрзЗржоржи 'ржЪрж┐ржЪрж┐ржВ ржлрж╛ржБржХ!'", "ржпрзЗ рждрзЛржорж╛рж░ рж╕рж╛ржоржирзЗржЗ ржмрж╕рзЗ ржЖржЫрзЗ (ржмрж╛ ржЧрзНрж░рзБржкрзЗ), рждрж╛ржХрзЗ ржПржХржЯрж╛ ржХржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржжрж╛ржУ!" ];

const choice = event.body.toLowerCase(); if (choice === "truth") { const truth = truths[Math.floor(Math.random() * truths.length)]; return api.sendMessage(ЁЯза Truth:\n${truth}, event.threadID); } else if (choice === "dare") { const dare = dares[Math.floor(Math.random() * dares.length)]; return api.sendMessage(ЁЯФе Dare:\n${dare}, event.threadID); } else { return api.sendMessage("тЪая╕П рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржи 'truth' ржЕржержмрж╛ 'dare' рж╢рзБржзрзБ!", event.threadID); } };


