const fs = require("fs");
const path = require("path");

const cookieFile = path.join(__dirname, "fb_cookies.json");

// ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶ñ‡¶æ‡¶≤‡¶ø JSON ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
if (!fs.existsSync(cookieFile)) {
  fs.writeFileSync(cookieFile, "[]", "utf8");
}

module.exports.config = {
  name: "fbsession",
  version: "1.0.6",
  hasPermssion: 2,
  credits: "ashik",
  description: "Facebook session save & restore with change-detection auto-save (Lemur Browser)",
  commandCategory: "utility",
  usages: "/fbsession save",
  cooldowns: 3,
};

let lastCookiesHash = ""; // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá

// ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞
function hashData(data) {
  return require("crypto").createHash("md5").update(JSON.stringify(data)).digest("hex");
}

module.exports.onLoad = async function ({ api }) {
  try {
    const cookies = JSON.parse(fs.readFileSync(cookieFile, "utf8"));
    if (cookies.length && api?.browser?.cookies) {
      for (const cookie of cookies) {
        await api.browser.cookies.set(cookie);
      }
      console.log("‚úÖ Facebook ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶Ö‡¶ü‡ßã-‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®");
      lastCookiesHash = hashData(cookies);
    } else {
      console.log("‚ö† ‡¶ï‡ßã‡¶® ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ Lemur Browser ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶æ");
    }

    // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶∏‡ßá‡¶≠ (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶≤‡ßá)
    if (api?.browser?.cookies) {
      setInterval(async () => {
        try {
          const currentCookies = await api.browser.cookies.getAll({});
          const currentHash = hashData(currentCookies);

          if (currentHash !== lastCookiesHash) {
            fs.writeFileSync(cookieFile, JSON.stringify(currentCookies, null, 2));
            lastCookiesHash = currentHash;
            console.log("üíæ Auto-save: Facebook ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá");
          } else {
            console.log("‚Ñπ ‡¶ï‡ßã‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á, ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡¶®‡¶ø");
          }
        } catch (err) {
          console.error("‚ùå Auto-save ‡¶è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err.message);
        }
      }, 5 * 60 * 1000);
    }
  } catch (err) {
    console.error("‚ùå ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶Ö‡¶ü‡ßã-‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err.message);
  }
};

module.exports.run = async function ({ api, event, args }) {
  const action = (args[0] || "").toLowerCase();

  if (!action || action !== "save") {
    return api.sendMessage("‚ö† ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶É /fbsession save", event.threadID, event.messageID);
  }

  try {
    if (!api?.browser?.cookies) {
      return api.sendMessage("‚ùå Lemur Browser ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶æ‡•§", event.threadID, event.messageID);
    }

    const cookies = await api.browser.cookies.getAll({});
    const currentHash = hashData(cookies);

    if (currentHash !== lastCookiesHash) {
      fs.writeFileSync(cookieFile, JSON.stringify(cookies, null, 2));
      lastCookiesHash = currentHash;
      return api.sendMessage("‚úÖ Facebook ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", event.threadID, event.messageID);
    } else {
      return api.sendMessage("‚Ñπ ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú‡ßá ‡¶ï‡ßã‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á, ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡¶®‡¶ø‡•§", event.threadID, event.messageID);
    }
  } catch (err) {
    return api.sendMessage("‚ùå ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: " + err.message, event.threadID, event.messageID);
  }
};
